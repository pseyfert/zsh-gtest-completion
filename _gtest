#compdef -P -value-,GTEST_*,-default-

# zsh completion script for google test

# Copyright (c) 2019, CERN for the benefit of the LHCb collaboration
# Author: Paul Seyfert <pseyfert@cern.ch>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization
# or submit itself to any jurisdiction.

_format() {
  local -a formats; formats=("json" "xml")
  compadd "$@" -q -S ':' ${formats}
}

_gtest_filter() {
  _message "not implemented"
}
_gtest_repeat() {
  _message "number of test repetitions, negative numbers to repeat forever"
}
_gtest_random_seed() {
  _message "random seed between 1 and 99999, 0 for current time"
}
_gtest_color() {
  local -a booleans; booleans=('yes' 'no' 'auto')
  _describe -t booleans 'color settings' booleans
}
_gtest_print_time() {
  local -a print_enabler; print_enabler=('0:do not print elapsed time' '1:print elapsed time')
  _describe -t print_enabler 'time print settings' print_enabler
}
_gtest_output() {
  if compset -P '*:'; then
    _path_files -g '*.'${IPREFIX}
  else
    _format
  fi
}
_gtest_stream_result_to() {
  if compset -P ':' ; then
    _message 'specify port on remote host'
  else
    _hosts -S ':'
  fi
}
_gtest_death_test_style() {
  local -a deathstyle; deathstyle=('fast' 'threadsafe')
  _describe -t deathstyle 'death test style' deathstyle
}
_gtest_catch_exceptions() {
  local -a catch_exceptions; catch_exceptions=('0:Do not report exceptions as test failures' '1:catch and report them')
  _describe -t catch_exceptions 'exception catch setting' catch_exceptions
}

if [[ "$service" = -value-* ]]; then
  var=${${${service:l}#-value-,}/,*}
  local retval
  _call_function retval _${var}
  return
fi

_arguments \
  "(- 1)--gtest_list_tests[List the names of all tests instead of running them.]" \
  "(- 1)--help[Print usage message and exit.]" \
  "--gtest_filter=[Filter tests to run by positive and negative patterns.]:pattern:_gtest_filter" \
  "--gtest_also_run_disabled_tests[Run all disabled tests too.]" \
  "--gtest_repeat=[Run the tests repeatedly; use a negative count to repeat forever.]:number:_gtest_repeat" \
  "--gtest_shuffle[Randomize tests' orders on every iteration.]" \
  "--gtest_random_seed=[Random number seed to use for shuffling test orders]:random seed:_gtest_random_seed" \
  "--gtest_color=[Enable/disable colored output.]: :_gtest_color" \
  "--gtest_print_time=[Print elapsed test time]:0 or 1:_gtest_print_time" \
  "--gtest_output=[Generate a JSON or XML report]:format and location:_gtest_output" \
  "--gtest_stream_result_to=[Stream test results to the given server.]:streaming destination:__gtest_output" \
  "--gtest_death_test_style=[Set the default death test style.]:death test style:_gtest_death_test_style" \
  "--gtest_break_on_failure[Turn assertion failures into debugger break-points.]" \
  "--gtest_throw_on_failure[Turn assertion failures into C++ exceptions for use by an external test framework.]" \
  "--gtest_catch_exceptions=[Do not report exceptions as test failures. Instead, allow them to crash the program or throw a pop-up (on Windows).]:disable exception catch:_gtest_catch_exceptions"
